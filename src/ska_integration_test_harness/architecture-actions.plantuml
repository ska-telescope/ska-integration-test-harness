@startuml

mainframe part 3
'skinparam packageStyle rectangle
skinparam linetype ortho

title Actions and Wrappers are used to interact with the telescope
' Enforce vertical layout
'top to bottom direction

package "Configurations" {

}

' Facades at the top
package "Facades" {

}

'Configurations .right.> Facades
Configurations .right.> Wrappers
Configurations .right.> Actions

' Wrappers and Devices in the middle
package "Structural Wrappers" {
    class TelescopeWrapper {
    }

    note right
    A wrapper is an adapter to a specific device of set of devices.
    Wrappers belong to subsystems.
    It can be emulated or production type.

    end note

    abstract class TMCDevices
    class ProductionTMCDevices
    abstract class CSPDevices
    class EmulatedCSPDevices
    class ProductionCSPDevices
    abstract class SDPDevices
    class EmulatedSDPDevices
    class ProductionSDPDevices
    abstract class DishesDevices
    class EmulatedDishesDevices
    class ProductionDishesDevices

    ProductionTMCDevices -up-|> TMCDevices
    EmulatedCSPDevices -up-|> CSPDevices
    ProductionCSPDevices -up-|> CSPDevices
    EmulatedSDPDevices -up-|> SDPDevices
    ProductionSDPDevices -up-|> SDPDevices
    EmulatedDishesDevices -up-|> DishesDevices
    ProductionDishesDevices -up-|> DishesDevices

    TelescopeWrapper "1" *-- "1" TMCDevices
    TelescopeWrapper "1" *-- "1" CSPDevices
    TelescopeWrapper "1" *-- "1" SDPDevices
    TelescopeWrapper "1" *-- "1" DishesDevices
}



package "Actions" {
    abstract class TelescopeAction {
        + timeout: int | float = (some default value)
        + execute()
        - _action() {abstract}
        + synchronize_on_events(): list[ExpectedStateChange] {abstract}
    }

    note right
    An action encapsulates an operation that has to be done on a telescope
    wrapper.
    It includes commands and their arguments as well as
    possible termination conditions (aka synchronization conditions).

    Builders are used to provide inputs to commands.
    end note

    class ExpectedStateChange {
        + device: DeviceProxy | str
        + attribute: str
        + expected_value: Any
    }

    class ObsStateCommandsInput {
        + build_command_input()
        + read_input_data_from_file()
    }

    class SubarrayConfigure
    class SubarrayEndObservation
    class MoveToOn
    class Etc

    SubarrayConfigure -up-|> TelescopeAction
    SubarrayEndObservation -up-|> TelescopeAction
    MoveToOn -up-|> TelescopeAction
    Etc -up-|> TelescopeAction

    TelescopeAction ..> ExpectedStateChange
}
' ensure Actions are below Wrappers
'"Wrappers" -down--- Actions

' Stacking packages vertically
Facades ...> "Wrappers"
Facades ...> "Actions"
"Actions" ......> Wrappers


' Position emulated devices slightly lower
EmulatedCSPDevices -[hidden]down- ProductionCSPDevices
EmulatedSDPDevices -[hidden]down- ProductionSDPDevices
EmulatedDishesDevices -[hidden]down- ProductionDishesDevices

@enduml