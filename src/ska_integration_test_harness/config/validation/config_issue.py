"""Data structures to represent the issues found in the configuration."""

import abc
import logging


class ConfigurationIssue(abc.ABC):
    """A data structure to represent an issue found in a configuration.

    A configuration issue is some anomaly in the configuration that
    may prevent the test harness from working correctly. It is generated by
    a validation procedure, it is defined by a message and it can be
    classified as critical (error) or non-critical (warning).

    A critical issue will stop the test harness from starting, while a
    non-critical issue will only generate a warning.

    All the issues will be logged (so this class instances - given a logger
    - they can log themselves).
    """

    def __init__(self, message: str) -> None:
        """Initialise the anomaly with a message.

        :param message: The message describing the anomaly.
        """

        self.message = message
        """The message describing the anomaly."""

    @abc.abstractmethod
    def is_critical(self) -> bool:
        """Return True if the anomaly is critical, False otherwise."""

    @abc.abstractmethod
    def log(self, logger) -> None:
        """Log the anomaly using the provided logger."""


class ConfigurationError(ConfigurationIssue):
    """A critical issue found in the configuration."""

    def is_critical(self) -> bool:
        return True

    def log(self, logger: logging.Logger) -> None:
        logger.error(str(self))

    def __str__(self) -> str:
        return "CONFIGURATION ERROR: " + self.message

    def __repr__(self) -> str:
        return self.__str__()


class ConfigurationWarning(ConfigurationIssue):
    """A non-critical issue found in the configuration."""

    def is_critical(self) -> bool:
        return False

    def log(self, logger: logging.Logger) -> None:
        logger.warning(str(self))

    def __str__(self) -> str:
        return "CONFIGURATION WARNING: " + self.message

    def __repr__(self) -> str:
        return self.__str__()


def create_configuration_issue(
    message: str, is_critical: bool = True
) -> ConfigurationIssue:
    """Create an error or warning regarding the configuration.

    A configuration issue is some anomaly in the configuration that
    may prevent the test harness from working correctly. It is generated by
    a validation procedure, it is defined by a message and it can be
    classified as critical (error) or non-critical (warning).

    A critical issue will stop the test harness from starting, while a
    non-critical issue will only generate a warning.

    :param message: The message describing the anomaly.
    :param is_critical: True if the anomaly is critical (error),
        False otherwise (warning). Default to True.
    :return: A ConfigurationAnomaly object.
    """
    if is_critical:
        return ConfigurationError(message)
    return ConfigurationWarning(message)
